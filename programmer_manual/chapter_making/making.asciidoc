== Making

Abidos making process is not than simple that i would want, there are a set of
scripts doing parts of the making process, trying to follow DRY.

[quote,'http://en.wikipedia.org/wiki/Don%27t_repeat_yourself[Andy Hunt and Dave Thomas]']
_____________________________________________________________________
The DRY principle is stated as "Every piece of knowledge must have a single,
unambiguous, authoritative representation within a system."
When the DRY principle is applied successfully, a modification of any single
element of a system does not require a change in other logically unrelated
elements.
_____________________________________________________________________

indexterm:[DRY]

Abidos is an experiment about a set of technologies that i am trying to put
together in this project, working and learning a lot of interesting things.
therefore lets go to see how the making process of Abidos is.

indexterm:[make]

=== Configuration

Abidos uses cmake http://www.cmake.org/ for this purpose.

[quote,'http://www.cmake.org/[cmake]']
_____________________________________________________________________
CMake is a family of tools designed to build, test and package software. CMake
is used to control the software compilation process using simple platform and
compiler independent configuration files. CMake generates native makefiles and
workspaces that can be used in the compiler environment of your choice.
_____________________________________________________________________ 

indexterm:[cmake]

To configure Abidos C++ write in a terminal:

----
cd processor
cmake .
----

[NOTE]
====
You can see more about configure in the user manual.
====

==== processor/CMakeLists.txt

Abidos sets here:

* his version
* the directories that make process should pass to the scripts.

Then the others CMakeLists.txt are processed in order to generate the Makefile.

indexterm:[Makefile]
indexterm:[compilation]

==== processor/src/CMakeLists.txt

Here cmake process:

* check if all necessary includes are installed in the system.
* check if Flex and Bison are installed in the system.
indexterm:[Flex]
indexterm:[Bison]

[NOTE]
====
Abidos do not use the code generated from Bison to do an ascent parser only use
some declarations needed by Flex.
====

* sets the build options.

generates rules for Makefile:

* calls flex_execute.pl.
  indexterm:[flex_execute.pl]
* calls bison_execute.pl.
  indexterm:[bison_execute.pl]
* to copy ts.cpp ts.h from preprocessor "a module used to
  scan files and generate graphs with the includes net and can be used to obtain
  a list with files and with includes"
* calls extract_symbols.pl.
  indexterm:[extract_symbols.pl]
* calls check_directories.pl and
  generate_begin_graph.pl.
  indexterm:[check_directories.pl]
  indexterm:[generate_begin_graph.pl]
* to compile and link Abidos.
  indexterm:[compile]
  indexterm:[link]
* indent_run that calls
  check_indent.sh and indent_run.sh.
  indexterm:[check_indent.sh]
  indexterm:[indent_run.sh]
* test_run that calls tests_run.pl
  indexterm:[tests_run.pl]
* install Abidos.
* uninstall Abidos.

[NOTE]
====
These scripts are explained in the next section.
====

==== processor/includes/CMakeLists.txt

Generates part of the make process where the version are wrote inside of
config.h using the script put_ifndef_date.pl

=== Files generated automatically

I am going to describe you how the builder scripts generate files needed by
Abidos. These scripts are located in processor/scripts/ directory.

When you have configured Abidos C++ a Makefile was generated, you can invoke:

----
make all
----

You can see in this diagram the scripts needed by make with his input files and
his output files.

.make process
image::images/chapter_making_making_1.{eps_svg}[align="center"]

These scripts are invoked in this order:

. scripts/put_ifndef_date.pl
Generates includes/config.h with compilation time and version extracted from
includes/config.h.in

. scripts/check_directories.pl
if any of this directories (out, test_out, .abidos) does not exist this script
creates them.
indexterm:[check_directories.pl]

** out here is where some files created automatically are put. So far only
generate_begin_graph.cpp is put here but in the future i want to put the output
files of flex, bison ... but for the moment i have other priorities.

** test_out the output of the *make test_run* the files generates in this
directory are explained forward in the testing chapter.

** .abidos_cpp this directory has the files input and output of Abidos C++ :

*** files_input

*** files_output.dot

. /scripts/generate_begin_graph.pl
generates generate_begin_graph.cpp and this file generates the header of
files_output.dot with version of Abidos and fonts sizes of the graphs.
indexterm:[generate_begin_graph.pl]

. scripts/bison_execute.pl
from src/parser.y generates:
indexterm:[bison_execute.pl]
indexterm:[bison]

** src/parser.c this file is no used to compile
Abidos directly but from this file some things are extracted.

** includes/parser.h

. scripts/extract_symbols.pl
Parses src/parser.c and generates includes/tokens.h with 2 important tables:

** yytokens: static const char \*const yytokens[]
In this table we have the description of the tokens for debug purposes,
for example if lexer passes token number 258 to parser with this table we
know 258 is "IDENTIFIER".
Is used by descent parser to print the tokens processed and to generates the
nodes of trace tree, trace tree is an output of the trace system of Abidos this
system can generate kind of trees to show how the syntactic rules are used and
there are nodes with *token is* and *token is not* entries where you can see
what tokens are processed that will be explained deeply in the trace chapter.
indexterm:[yytokens]

** yytokens_short: static const char \*const yytokens_short[]
It is similar than the previous table but when the token is an ASCII symbol,
we can read 36Th ASCII symbol like this "36->$".
indexterm:[yytokens_short]

. scripts/flex_execute.pl
Parses src/lexer.l and generates src/lexer.c (this file uses parser.h generates
by Bison).

=== Compilation & linking stages

So far make process has generated all necessary files, with this files and the
other files in src/ and include/ compilation and
linking process generates src/abidos_cpp executable.

=== Other make rules

* test_run that calls tests_run.pl Explained in the testing chapter
indexterm:[tests_run.pl]

* indent_run that calls check_indent.sh and indent_run.sh, this scripts put all
the Abidos code in a style of codification for now that style is Kernighan and
Ritchie's http://en.wikipedia.org/wiki/Indent_style and the beautifier used
is *astyle*
indexterm:[check_indent.sh]
indexterm:[indent_run.sh]
indexterm:[astyle]

