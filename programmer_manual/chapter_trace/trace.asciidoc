== Trace system

Abidos when finishes the parsing process can generates a diagram tree with
the rules used, you should use it only with small examples. In c_parser_descent
you can see how all rules pass trace_node and add it to trace_graph

----
int c_parser_descent::extern_c(c_trace_node trace_node)
{
    trace_graph.add(trace_node, "extern_c"); <1>
...
}
----

<1> that is how trace system knows what rule has been called.

c_trace_graph trace_graph
indexterm:[c_trace_node]
indexterm:[c_trace_node]
indexterm:[c_trace_graph]
indexterm:[trace_graph]

Here is the output tree drawn by Abidos trace system for the previous example:

.trace tree example
image::images/chapter_trace_examples_trace_book_01.cpp.{eps_svg}[align="center"]

Is a super-set of an *annotated parse tree* we can see the successfully
branches and the unsuccessfully.
indexterm:[annotated parse tree]
indexterm:[c_trace_node]

Nodes begin with _<number>_: is the order in which abidos have processed it.

Shape of nodes have these meanings:

* ellipsis, are non terminal rules, like this
----
declaration_seq:
	declaration
	| declaration_seq declaration
	;
----

* box, are rules when some terminal tokens are processed, it can have no
terminal rules too, perimeter line of nodes have these meanings:

1) dotted in this nodes the terminals not matched, for example in:
----
      _13_template_declaration
      int is not TEMPLATE <1>
----
<1> Abidos was trying to match "int" with the reserved word "TEMPLATE".
indexterm:[dotted]

//without this comment the next line are nested :-(
2) green line: in this nodes some terminals matched, for example in:
----
      _15_simple_declaration
      ; is ; <1>
----
<1> Abidos was trying to match ";" with ";" and it matched.
indexterm:[green]

You can see parsing a little example like that generate a tree with more than 40
nodes, descent parsing is more inefficient than yacc parsing, but i will try
to improve this with pruning methods. And remember C++ is a complex grammar to
do in yacc because is a tough task write his grammar using LALR.

If you wan see the *annotated parse tree* without only the successfully branches
you can open the *_pruned* version like this:
indexterm:[annotated parse tree]

.trace tree pruned example
image::images/chapter_trace_examples_trace_book_01.cpp_pruned.{eps_svg}[align="center"]

