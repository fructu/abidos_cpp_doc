== Lexer
indexterm:[lexer]

Abidos has a lexer generated by flex, lexer can work alone or with the loader
component see <<loader, chapter Loader>>.
indexterm:[flex]

Lexer is used by parser *src/parser_descent.cpp* the steeps are:

. lex_file_init(file_name), lexer open the file_name and initializes his
structures to scan it for example the stack of files.

. yylex(), iterating with this function parser obtain the tokens of the source
file.

. lex_file_push, if the actual file has #include "<file>"
then src/parser_descent_preprocessor.cpp push it and the scanner:
.. stop to scan the actual file.
.. saves the environment of his structures.
.. begin to parse the included file.
.. when the included file has bee finished, resume the parsing of the previous
file.

. lex_file_end(), parser call this to close the file.

. yylex_destroy(), free memory used by the lexer to do his work.

Lets look the next example:

We have *f1.cpp* file that includes *f2.h* and this includes *f3.h*,
lexer starts parsing *f1.cpp*, when parser found *#include "f2.h"*
uses *lex_file_push* to store the context about *f1.cpp*, and lex starts to scan
*f2.h* until parser founds *#include "f3.h"*, then another call to
*lex_file_push* and lexer starts to scan *f3.h*, when the eof is reached,
lexer pop out the file from stack and restores the context of *f2.h* when the
eof of this file is reached another pop out restores the context of the first
file *f1.cpp*.

.stack changes with #includes
image::images/chapter_lexer_stack_01.{eps_svg}[align="center"]

