== Architecture of abidos

The Goal of this chapter is to show you what components have Abidos and which is
the purpose of this components. All this components will be explain in a
chapter for each of them.

.Abidos components
image::images/chapter_architecture_components_01.{eps_svg}[align="center"]

Abidos have these main modules:
indexterm:[architecture]
indexterm:[design]

* loader
indexterm:[loader]

* lexical analyzer: The lexer of Abidos generated by Flex.
indexterm:[lexical]

* syntactic analyzer: The Parser of Abidos, hand made, is a descent parser.
indexterm:[syntactic]

* semantic analyzer: The deep knowledge about C++ is here this component put it
in symbols table.
indexterm:[semantic]

* symbols table: Stores information about Classes, Structures ... this
information is used by parser and generators.
indexterm:[symbols]

* generators: Traverses the information of symbols table and generates an
output:
indexterm:[generators]

** UML diagrams: The output are dot files *.abidos/files_output.dot*

** original code: This generator tries to generate the same input cpp file
for example *test/t001.cpp* -> *test_out/out_t001.cpp*

* trace system: When the parser is working send to trace system information
about what rules has been used, when the parser finishes his work, trace system
generates trace output with *annotated parse trees*.
indexterm:[annotated parse trees]


* dot viewer: used to see the dot output of Abidos examples:
indexterm:[dot viewer]
----
xdot_run.py .abidos/files_output.dot <1>
xdot_run.py test_out/trace_t031_01.cpp_urls_pruned.gv <2>
----

<1> This is the standard output of Abidos to see the UML diagram generated.

<2> Parser annotated tree of the test file tests/t031_01.cpp.


