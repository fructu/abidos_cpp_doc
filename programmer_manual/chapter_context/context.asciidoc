== Context
[[context]]

Now you had a quick look about how parser works and you know about trace system,
we can understand *Context* that is a very important part of Abidos, in order
to know the need of Context lets see some things Abidos needs to know when
he is parsing a C++ project.

=== How do context do it?

We start with this example:

.test/book_02.cpp
----
int a1; <1>

class A
{
	int a2; <2>
};
----
indexterm:[context]

<1> here a1 is a free variable declaration.

<2> a2 is a member variable of A class.

When Abidos enters in a Class Scope he has to know that he is inside of a Class
in all rules executed in that class, in the previous example How do Abidos know
*a2* is a member of *A class* ?

To answers this question first take a look of the *annotated parse tree* for
this example.

We can see the *annotated parse tree* writing in a console:
----
make test_run
xdot_run.py test_out/trace_book_02.cpp_urls_pruned.gv
----

indexterm:[annotated parse tree]

You will see a tree like this:

.trace_book_02.cpp_urls_pruned
image::images/chapter_context_trace_book_02.cpp_urls_pruned.{eps_svg}[align="center"]

* How Abidos parses *A*

When Abidos enters in *_71_class_specifier* the context set the next value:

----
int c_parser_descent::class_specifier(c_trace_node trace_node)
{
  ...
  context.class_specifier_status = CLASS_SPECIFIER_STATUS_IDENTIFIER; <1>
  ...
}
----

<1> with this line Abidos knows he are inside of a Class scope.

Later in the rule *_75_identifier* Abidos parses *A* identifier and calls

----
int c_parser_descent::identifier(c_trace_node trace_node)
{
  ...
  semantic.identifier(context, c_token_get());
  ...
}
----

Semantic process it:

----
void c_semantic::identifier(c_context & context, c_token token)
{
    ...
    if (CLASS_SPECIFIER_STATUS_IDENTIFIER ==
            context.class_specifier_status) {
        class_specifier_identifier(context, token); <1>
    }
    ...    
}
----

<1> by the *context* knows *A* is the name of a Class.

[NOTE]
====
context is a glue to join the knowledge of parser and semantic.
====

* When Abidos parses *a2* 

first in _101_member_declaration context set:

----
int c_parser_descent::member_declaration(c_trace_node trace_node)
{
    ...
    context.class_specifier_status =
        CLASS_SPECIFIER_STATUS_MEMBER_SPECIFIER;
    ...
    decl_specifier_seq_opt(trace_node); <1>
    ...
    context.class_specifier_status =
        CLASS_SPECIFIER_STATUS_MEMBER_DECLARATOR; <2>
    ...    
}        
----

<1> this rule is to process the *int* token.

<2> this state will be use by semantic.


and when Abidos uses _109_identifier and this rule calls *semantic::identifier*:

----
    ...
    if (CLASS_SPECIFIER_STATUS_MEMBER_DECLARATOR ==
            context.class_specifier_status) {
    ...
            class_member_declarator(context, token); <1>
    ...
----

<1> semantic process *a2* like a member.

*A* and *a2* has been processed by the same rule *c_parser_descent::identifier*
but the context is the key for semantic can do his work, and put *A* like a
class in the symbols table and *a2* like a a member of *A*.

In this state machine we can see the states and the syntactic rules that change
the states:

.state machine
image::images/chapter_context_class_specifier_status_01.{eps_svg}[align="center"]

=== Parts of context

* unsigned i_token: is a pointer to *tokens_vector*

* enum t_class_specifier_status class_specifier_status: with this semantic know
where the syntactic are:
** NO_CLASS_STATUS : parser is out of a class.
** CLASS_SPECIFIER_STATUS_IDENTIFIER : parser passed for class_specifier rule.
** CLASS_SPECIFIER_STATUS_BASE_DECLARATION : parser passed for class_head rule
and now is inside of base_clause_opt rule.
** CLASS_SPECIFIER_STATUS_MEMBER_SPECIFIER : parser passed for
member_declaration rule and now is inside of decl_specifier_seq_opt rule.
** CLASS_SPECIFIER_STATUS_MEMBER_DECLARATOR : parser passed for
member_declaration rule and now is inside of member_declarator_list_opt rule.
** CLASS_SPECIFIER_STATUS_FRIEND_DECLARATOR : parser is inside of
friend_specifier rule.

* int class_key : in class_key rule this member specified:
CLASS, STRUCT, UNION.

* int access_specifier: in class_key rule this member contains one of:
PUBLIC, PRIVATE, PROTECTED.

* string class_name_declaration : contains the name of the class that parser
are inside.

* int is_abstract : if a class have a function member with "=0;" in his finish
then the class is abstract.

* int i_am_in_member : set inside of member_declaration rule.

* string member_declaration :	set by semantic::identifier() when
i_am_in_member is 1.

* int member_definition_outside : set by
c_semantic::check_coloncolon_member_function() inside of this function where can
are in the scope of a class for example inside of the member function *A::f(){}*
we are in the scope of A then we need put that in the context and restore the
previous context when we reach the *"}"*.

* string declaration : set by c_semantic::identifier() when there
is *NO_CLASS_STATUS == context.class_specifier_status* condition.

* int i_am_in_parameter_declaration : set in parameter_declaration_clause
rule.

* int just_reloaded : when the parser calls token_vector.clear() this
member is set to 1, this is to avoid token_next() go over the first element
of vector_tokens.

* t_vector_decl_specifier param_vector_decl_specifier : set in
simple_type_specifier, parameter_declaration_list, ELLIPSIS_opt rules
when context.i_am_in_parameter_declaration is 1.

* c_class_member class_member : used in the next rules
** unqualified_id : class_member.is_destructor.
** operator_function_id : class_member.operator_overload_suffix,
class_member.is_operator_overload.
** _operator : class_member.operator_overload_suffix,
class_member.is_operator_overload.
** direct_declarator : class_member.is_function.
** consume_array_brackets : so far this is a dummy version, use
class_member.is_function.
* c_declarator declarator : used in the next rules :
** compound_statement : context.declarator.has_body = 1.
** simple_declaration : context.declarator.has_body = 0.
** direct_declarator : when the function is free ->
context.declarator.is_function = 1, if the function is a member class_member is
used.

* int is_typedef : used in typedef_specifier rule and in class_specifier
some people use typedef class ...

* int i_am_in_template_declaration : used in simple_type_specifier,
template_declaration.

* int declaring_template_type : used in type_parameter.

* c_template_parameter template_parameter : used in type_parameter.

* t_vector_template_parameter : used in template_id, template_argument rules.

* t_map_template_parameter map_template_parameter : used in template_id rule.

* int is_template_instantiation : used in simple_type_specifier, ptr_specifier,
template_id, template_argument, init_declarator rules.

* t_vector_template_argument vector_template_argument : used in
simple_type_specifier, ptr_specifier, template_argument

* t_map_template_argument map_template_argument : used in
c_semantic: class_member_declarator(), identifier_typedef(),
declarator_insert().

* string namespace_name_declaration : used in original_namespace_definition
rule.

* int is_enum_declaration : used in enum_specifier rule.

* int prefix_sharp : used in preprocessor_ifndef rule this is to search
preprocessor symbols in symbols table with "#" prefix.

* int class_pre_declaration :  used in class_specifier rule and
semantic::class_pre_declaration_to_declaration()
[code, c]
----
class A;
class A {}; <-- we are in A here
----

//

