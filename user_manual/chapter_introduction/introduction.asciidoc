== Introduction

=== Why this project ?
When you start a new project is good to start with a set of UML diagrams, but
that is not always possible or is a hard task to do those diagrams with a tool.

Abidos extract the information of C++ headers and source code; and generates 
those diagrams for you fast and easily.

.Cpp Showing mode
==========================
With a piece of code like this:
[source,c]
----
class hello
{
};

class world: hello
{
};
----
Abidos process it and will show you:

image::images/chapter_introduction_example_01.{ps_png}[align="center"]

==========================

Browse code is sometimes a boring task, with abidos you can do it easily; Abidos
 generates UML diagrams, you can click into an attribute or method that
you want to see or edit, and Abidos will open an editor with that piece of code.

.Cpp Browsing code
==========================
You can click in the a1 method of A class node and Abidos will open an editor
and put the cursor in that line:

image::images/chapter_introduction_example_02.{ps_png}[align="center"]

==========================

=== But there is another projects like doxygen ...

Yes doxygen is a superb project, i started Abidos because i wanted to have other
goals:

* Doxygen is designed to generate documentation, Abidos is about interacting 
  with code.
* In future versions of Abidos Code refactoring 
  indexterm:[refactorization, Code refactoring] code will be available.
* I was interested in the development of a C++ parser; is good do something like 
  that.
* I would like to write other versions of abidos for other languages, i have a
  prototype of Abidos python indexterm:[python,Abidos_python] project,
  for now Abidos_cpp is more active.
* I want have a project that i can add a new back-ends generator to do
  meta-programing indexterm:[meta-programing] for example generate sql 
  indexterm:[sql] interface (a class with methods to insert and modified
  information) from a struct declaration.
* Abidos use a descent parser indexterm:[descent parser,parser] and use 
  backtracking indexterm:[backtracking], for now i am happy with that
  architecture but i have to investigate it more deeply.

